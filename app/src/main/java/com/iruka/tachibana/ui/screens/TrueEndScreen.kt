package com.iruka.tachibana.ui.screens


import android.media.MediaPlayer
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.EaseInOutCirc
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.iruka.tachibana.R
import kotlinx.coroutines.delay
import com.iruka.tachibana.ui.screens.YuseiMagic
import androidx.compose.animation.core.LinearEasing
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.ui.draw.clipToBounds
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.res.stringResource


@Composable
fun TrueEndScreen(navController: NavController) {
    val context = LocalContext.current
    val mediaPlayer = remember { mutableStateOf<MediaPlayer?>(null) }

 //   LaunchedEffect(Unit) {
//        val player = MediaPlayer.create(context, R.raw.true_bgm) // ÂøÖË¶Å„Å™„Çâtrue„Ç®„É≥„ÉâÁî®BGMËøΩÂä†
   //     player.isLooping = true
  //      player.start()
 //       mediaPlayer.value = player
//    }

    DisposableEffect(Unit) {
        onDispose {
            mediaPlayer.value?.release()
        }
    }

    val sceneList = listOf(
        Triple(R.drawable.bad2_1, listOf(stringResource(R.string.TrueEnd_line_0)), true),

        Triple(R.drawable.bad2_2, listOf(
            stringResource(R.string.TrueEnd_line_1),
            stringResource(R.string.TrueEnd_line_2)
        ), true),

        Triple(R.drawable.bad2_3, listOf(
            stringResource(R.string.TrueEnd_line_3),
            stringResource(R.string.TrueEnd_line_4),
            stringResource(R.string.TrueEnd_line_5),
            stringResource(R.string.TrueEnd_line_6)
        ), true),

        Triple(R.drawable.bad2_4, listOf(
            stringResource(R.string.TrueEnd_line_7),
            stringResource(R.string.TrueEnd_line_8),
            stringResource(R.string.TrueEnd_line_9),
            stringResource(R.string.TrueEnd_line_10),
            stringResource(R.string.TrueEnd_line_11)
        ), true),

        Triple(R.drawable.true1, listOf(stringResource(R.string.TrueEnd_line_12)), true),

        Triple(R.drawable.true2, listOf(stringResource(R.string.TrueEnd_line_13)), true),

        Triple(R.drawable.true3, listOf(
            stringResource(R.string.TrueEnd_line_14),
            stringResource(R.string.TrueEnd_line_15),
            stringResource(R.string.TrueEnd_line_16),
            stringResource(R.string.TrueEnd_line_17),
            stringResource(R.string.TrueEnd_line_18),
            stringResource(R.string.TrueEnd_line_19)
        ), true),

        Triple(R.drawable.true4, listOf(
            stringResource(R.string.TrueEnd_line_20),
            stringResource(R.string.TrueEnd_line_21),
            stringResource(R.string.TrueEnd_line_22)
        ), true),

        Triple(R.drawable.true5, listOf(
            stringResource(R.string.TrueEnd_line_23),
            stringResource(R.string.TrueEnd_line_24)
        ), true),

        Triple(R.drawable.true7, listOf(
            stringResource(R.string.TrueEnd_line_25),
            stringResource(R.string.TrueEnd_line_26),
            stringResource(R.string.TrueEnd_line_27)
        ), true),

        Triple(R.drawable.true8, listOf(stringResource(R.string.TrueEnd_line_28)), true),

        Triple(R.drawable.true5, listOf(stringResource(R.string.TrueEnd_line_29)), true),

        Triple(R.drawable.true7, listOf(
            stringResource(R.string.TrueEnd_line_30),
            stringResource(R.string.TrueEnd_line_31),
            stringResource(R.string.TrueEnd_line_32),
            stringResource(R.string.TrueEnd_line_33)
        ), true),

        Triple(R.drawable.true9, listOf(stringResource(R.string.TrueEnd_line_34)), true),

        Triple(R.drawable.true10, listOf(stringResource(R.string.TrueEnd_line_35)), true) // „Çø„Ç§„Éà„É´Ë°®Á§∫
    )



    var currentImageIndex by remember { mutableStateOf(0) }
    var currentLineIndex by remember { mutableStateOf(0) }
    var isAnimating by remember { mutableStateOf(false) }
    val currentTriple = sceneList[currentImageIndex]
    val imageResId = currentTriple.first
    val lines = currentTriple.second
    val changeImage = currentTriple.third
    val true2Index = sceneList.indexOfFirst { it.first == R.drawable.true2 }

    var titleVisible by remember { mutableStateOf(false) }

    val animatedImageList = listOf(
        R.drawable.bad2_1,
        R.drawable.bad2_2,
        R.drawable.true1,
        R.drawable.true2,
        R.drawable.true3,
        R.drawable.true9,
        R.drawable.true10
    )

    LaunchedEffect(currentImageIndex) {
        if (currentImageIndex == sceneList.lastIndex) {
            delay(400)
            titleVisible = true

            // üé¨ true10 Ë°®Á§∫Âæå„Å´„Ç®„É≥„Éá„Ç£„É≥„Ç∞„É≠„Éº„É´„Å∏ÈÅ∑Áßª
            delay(4000)  // 4ÁßíÂæÖ„Å§
            navController.navigate("ending_roll") {
                popUpTo("true") { inclusive = true } // ÈÅ∑ÁßªÂæå„Å´Êàª„Çå„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã
            }
        } else {
            titleVisible = false
        }
    }
    LaunchedEffect(currentImageIndex) {
        if (sceneList.getOrNull(currentImageIndex)?.first == R.drawable.true2) {
            AudioManager.stopBgm()
            AudioManager.playBgm(context, R.raw.lost)
        }
    }
    Box(
        modifier = Modifier
            .fillMaxSize()
            .clickable {
                if (!isAnimating) {
                    if (currentLineIndex < lines.lastIndex) {
                        currentLineIndex++
                    } else if (currentImageIndex < sceneList.lastIndex) {
                        currentImageIndex++
                        currentLineIndex = 0
                    } else {
                        // üëá true10„ÅÆ„Å®„Åç„ÅØÂàùÊúüÁîªÈù¢„Å´Êàª„Çâ„Åö„ÄÅending_roll„ÅÆLaunchedEffect„Å´‰ªª„Åõ„Çã
                        if (imageResId != R.drawable.true10) {
                            navController.navigate("initial") {
                                popUpTo("true") { inclusive = true }
                            }
                        }
                    }
                }
            },

    contentAlignment = Alignment.Center
    ) {
        // üé® ËÉåÊôØÁîªÂÉèÔºàtrue2„ÅÆ„ÅøÔºâ
        if (currentImageIndex >= true2Index) {
            Image(
                painter = painterResource(id = R.drawable.true2),
                contentDescription = null,
                contentScale = ContentScale.Crop,
                modifier = Modifier.matchParentSize()
            )
        } else {
            Box(modifier = Modifier.matchParentSize().background(Color.Black))
        }

        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            if (changeImage && imageResId != R.drawable.true2) {

                if (imageResId in animatedImageList)  {
                    AnimatedImageFadeIn(
                        imageResId = imageResId,
                        onAnimationStateChange = { isAnimating = it },
                        bottomText = null
                    )
                } else {// true2„Å†„Åë„Çπ„Ç≠„ÉÉ„Éó
                Image(
                    painter = painterResource(id = imageResId),
                    contentDescription = null,
                    contentScale = ContentScale.Fit,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(400.dp)
                        .padding(bottom = 16.dp)
                )
            }}

            AnimatedVisibility(
                visible = true,
                enter = fadeIn(animationSpec = tween(durationMillis = 800))
            ) {
                Text(
                    text = lines[currentLineIndex],
                    color = Color.White,
                    fontFamily = YuseiMagic,
                    modifier = Modifier.padding(16.dp)
                )
            }
        }
        if (currentImageIndex == sceneList.lastIndex) {
            AnimatedVisibility(
                visible = titleVisible,
                enter = fadeIn(animationSpec = tween(durationMillis = 1200, easing = EaseInOutCirc))
            ) {
                Text(
                    text = "True End„ÄÄÊñ≠„Å°Ëä±",
                    fontSize = 20.sp,
                    color = Color.White,
                    fontFamily = YuseiMagic,
                    modifier = Modifier
                        .align(Alignment.BottomEnd)
                        .padding(24.dp)
                )
            }
        }
    }
}

@Composable
fun AnimatedImageFadeIn(
    imageResId: Int,
    onAnimationStateChange: (Boolean) -> Unit,
    bottomText: String? = null // „Ç™„Éó„Ç∑„Éß„É≥„ÅßText„ÇÇÂá∫„Åõ„Çã
) {
    val alpha = remember { Animatable(0f) }

    LaunchedEffect(imageResId) {
        onAnimationStateChange(true)
        alpha.snapTo(0f)
        delay(200)
        alpha.animateTo(
            targetValue = 1f,
            animationSpec = tween(durationMillis = 2200, easing = EaseInOutCirc)
        )
        onAnimationStateChange(false)
    }

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier
            .fillMaxWidth()
            .graphicsLayer(alpha = alpha.value)
            .padding(bottom = 16.dp)
    ) {
        Image(
            painter = painterResource(id = imageResId),
            contentDescription = null,
            contentScale = ContentScale.Fit,
            modifier = Modifier
                .fillMaxWidth()
                .height(400.dp)
        )

        bottomText?.let {
            Text(
                text = it,
                color = Color.White,
                fontSize = 20.sp,
                fontFamily = YuseiMagic
            )
        }
    }
}


@Composable
fun EndingRollScreen(onFinished: () -> Unit) {
    val context = LocalContext.current
    val scrollState = rememberScrollState()

    val lines = listOf(
        "Êñ≠„Å°Ëä±", "", "„Ç≠„É£„É©„ÇØ„Çø„ÉºÊßãÁØâÂèÇËÄÉ", "", "„Å°„Å≥„Å∞„Å™",
        "Âà∂‰ΩúËÄÖ„ÅÆÂ¶π„Å®„ÅÆ‰ºöË©±„ÄÅ‰∫∫Ê†º„Çà„Çä", "", "ËÑöÊú¨„ÉªÊºîÂá∫ÔºöLuka", "‰ºÅÁîª„ÉªÊßãÊàêÔºöLuka", "„Ç¢„Éó„É™ÈñãÁô∫ÔºöLuka", "",
        "„Ç¢„Éº„Éç„Çπ„Éà„Éª„Éò„Éü„É≥„Ç∞„Ç¶„Çß„Ç§„ÄéËÄÅ‰∫∫„Å®Êµ∑„ÄèÔºàThe Old Man and the SeaÔºâ", "",
        "ÊñáÂ≠¶ÂºïÁî®Ôºö‰∫ï‰ºèÈ±í‰∫å„ÄéÂ±±Ê§íÈ≠ö„Äè", "ÔºàÊñ∞ÊΩÆÊñáÂ∫´Ôºâ", "",
        "‚Äª„Åì„ÅÆ‰ΩúÂìÅ„Å´„ÅØ„ÄÅ‰∫ï‰ºèÈ±í‰∫å„ÄéÂ±±Ê§íÈ≠ö„Äè„Åã„ÇâÁùÄÊÉ≥„ÇíÂæó„ÅüÊßãÈÄ†„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
        "„ÄåÈñâ„ÅòËæº„ÇÅ„ÅüËÄÖ„Åå„ÄÅ„ÅÑ„Å§„ÅÆÈñì„Å´„ÅãÈñâ„ÅòËæº„ÇÅ„Çâ„Çå„Å¶„ÅÑ„Åü„Äç„Å®„ÅÑ„ÅÜÊßãÈÄ†„ÄÇ", "",
        "Á¥†ÊùêÊèê‰æõÔºö", "„Åµ„Åç„Å†„Åó„Éá„Ç∂„Ç§„É≥", "",
        "Special Thanks", "„Åó„ÇÉ„Çç„ÅÜ„Äålost„Äç", "DOVA-SYNDROME", "On-Jin ÔΩûÈü≥‰∫∫ÔΩû", "",
        "Âà∂‰Ωú", "Luca Verce", "", "Powered by", "ChatGPT √ó Kotlin √ó Luka √ó „ÅÇ„Å™„Åü", "",
        "End of Chapter", "", "Êñ≠„Å°Ëä±", "", "Special Thanks", "„ÅÇ„Å™„ÅüËá™Ë∫´", "‰æùÂ≠ò„Å®Âêë„ÅçÂêà„ÅÜ„Åô„Åπ„Å¶„ÅÆ‰∫∫„Åü„Å°„Å∏", "",
        "„Åì„ÅÆ30Êó•Èñì„ÄÅ„Çà„Åè„Åå„Çì„Å∞„Å£„Åü„Å≠ÔºÅ", "„Äå‰Ωï„Åã„ÇíÊâãÊîæ„Åô„Åì„Å®„Äç„ÅØ„ÄÅ„Äå‰Ωï„Åã„ÇíÈÅ∏„Å≥Áõ¥„Åô„Åì„Å®„Äç„Åß„ÇÇ„ÅÇ„Çã„ÄÇ",
        "„Åæ„Åü„ÅÑ„Å§„Åß„ÇÇ„ÄÅ‚Äú„Åü„Å°„Å∞„Å™‚Äù„Å´‰ºö„ÅÑ„Å´„Åç„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    )

    LaunchedEffect(Unit) {
        delay(300) // ÊúÄÂàù„ÅÆ„Åü„ÇÅ
        scrollState.animateScrollTo(
            scrollState.maxValue + 1000,
            animationSpec = tween(durationMillis = 60000, easing = LinearEasing)
        )
        delay(3000)
        onFinished()
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black)
            .clickable { onFinished() }
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(scrollState)
                .padding(vertical = 100.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            lines.forEach {
                Text(
                    text = it,
                    fontSize = 20.sp,
                    fontFamily = YuseiMagic,
                    color = Color.White,
                    modifier = Modifier.padding(vertical = 6.dp)
                )
            }
        }
    }
}
